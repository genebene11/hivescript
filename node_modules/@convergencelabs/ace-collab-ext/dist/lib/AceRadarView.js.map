{"version":3,"file":"AceRadarView.js","sourceRoot":"","sources":["../../src/ts/AceRadarView.ts"],"names":[],"mappings":";;;AACA,iEAA8D;AAG9D;;;;GAIG;AACH;IAKE;;;;;;;OAOG;IACH,sBAAY,OAA6B,EAAE,MAAkB;QAC3D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;SACpD;aAAM;YACL,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;SAC3B;QAED,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;QAC5C,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED;;;;;;;;;;;;;OAaG;IACI,8BAAO,GAAd,UAAe,EAAU,EAAE,KAAa,EAAE,KAAa,EAAE,QAAmB,EAAE,SAAiB;QAC7F,IAAM,SAAS,GAAG,IAAI,6CAAqB,CACzC,KAAK,EACL,KAAK,EACL,QAAQ,EACR,SAAS,EACT,IAAI,CAAC,OAAO,CACb,CAAC;QAEF,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;QACjD,SAAS,CAAC,MAAM,EAAE,CAAC;QAEnB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED;;;;;;;OAOG;IACI,8BAAO,GAAd,UAAe,EAAU;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,SAAS,CAAC;IACvC,CAAC;IAED;;;;;;;OAOG;IACI,kCAAW,GAAlB,UAAmB,EAAU,EAAE,IAAe;QAC5C,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAClC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED;;;;;;;OAOG;IACI,mCAAY,GAAnB,UAAoB,EAAU,EAAE,GAAW;QACzC,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAClC,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,gCAAS,GAAhB,UAAiB,EAAU;QACzB,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAClC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC7B,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,iCAAU,GAAjB,UAAkB,EAAU;QAC1B,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAClC,SAAS,CAAC,OAAO,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACzB,CAAC;IACH,mBAAC;AAAD,CAAC,AAlHD,IAkHC;AAlHY,oCAAY","sourcesContent":["import {Ace} from \"ace-builds\";\nimport {AceRadarViewIndicator} from \"./AceRadarViewIndicator\";\nimport {IRowRange} from \"./RowRange\";\n\n/**\n * Implements viewport awareness in the Ace Editor by showing where remote\n * users are scrolled too and where there cursor is in the document, even\n * if the cursor is not in view.\n */\nexport class AceRadarView {\n  private readonly _views: { [key: string]: AceRadarViewIndicator };\n  private readonly _editor: Ace.Editor;\n  private _container: HTMLElement;\n\n  /**\n   * Constructs a new AceRadarView bound to the supplied element and editor.\n   *\n   * @param element\n   *          The HTML Element that the AceRadarView should render to.\n   * @param editor\n   *          The Ace Editor to listen to events from.\n   */\n  constructor(element: HTMLElement | string, editor: Ace.Editor) {\n    this._container = null;\n    if (typeof element === \"string\") {\n      this._container = document.getElementById(element);\n    } else {\n      this._container = element;\n    }\n\n    this._container.style.position = \"relative\";\n    this._views = {};\n    this._editor = editor;\n  }\n\n  /**\n   * Add a view indicator for a new remote user.\n   *\n   * @param id\n   *          The unique id of the user.\n   * @param label\n   *          A text label to displAce for the user.\n   * @param color\n   *          The color to render the indicator with.\n   * @param viewRows\n   *          The rows the user's viewport spans.\n   * @param cursorRow\n   *          The row that the user's cursor is on.\n   */\n  public addView(id: string, label: string, color: string, viewRows: IRowRange, cursorRow: number) {\n    const indicator = new AceRadarViewIndicator(\n      label,\n      color,\n      viewRows,\n      cursorRow,\n      this._editor\n    );\n\n    this._container.appendChild(indicator.element());\n    indicator.update();\n\n    this._views[id] = indicator;\n  }\n\n  /**\n   * Determines if the AceRadarView has an indicator for this specified user.\n   *\n   * @param id\n   *          The id of the user to check for.\n   * @returns\n   *   True if the AceRadarView has an indicator for this user, false otherwise.\n   */\n  public hasView(id: string): boolean {\n    return this._views[id] !== undefined;\n  }\n\n  /**\n   * Sets the view row span for a particular user.\n   *\n   * @param id\n   *          The id of the user to set the rows for.\n   * @param rows\n   *          The row range to set.\n   */\n  public setViewRows(id: string, rows: IRowRange) {\n    const indicator = this._views[id];\n    indicator.setViewRows(rows);\n  }\n\n  /**\n   * Sets the cursor row for a particular user.\n   *\n   * @param id\n   *          The id of the user to set the cursor row for.\n   * @param row\n   *          The row to set.\n   */\n  public setCursorRow(id: string, row: number) {\n    const indicator = this._views[id];\n    indicator.setCursorRow(row);\n  }\n\n  /**\n   * Clears the view for a particular user, causing their indicator to disapear.\n   * @param id\n   *   The id of the user to clear.\n   */\n  public clearView(id: string): void {\n    const indicator = this._views[id];\n    indicator.setCursorRow(null);\n    indicator.setViewRows(null);\n  }\n\n  /**\n   * Removes the view indicator for the specified user.\n   * @param id\n   *   The id of the user to remove the view indicator for.\n   */\n  public removeView(id: string): void {\n    const indicator = this._views[id];\n    indicator.dispose();\n    delete this._views[id];\n  }\n}\n"]}