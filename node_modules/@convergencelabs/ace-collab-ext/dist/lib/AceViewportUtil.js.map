{"version":3,"file":"AceViewportUtil.js","sourceRoot":"","sources":["../../src/ts/AceViewportUtil.ts"],"names":[],"mappings":";;;AAIA;IAAA;IAkCA,CAAC;IAhCe,oCAAoB,GAAlC,UAAmC,MAAkB;QACnD,IAAI,QAAQ,GAAW,MAAM,CAAC,kBAAkB,EAAE,CAAC;QACnD,IAAI,OAAO,GAAW,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAEjD,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE;YACvC,QAAQ,EAAE,CAAC;SACZ;QAED,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE;YACtC,OAAO,EAAE,CAAC;SACX;QAED,IAAM,QAAQ,GAAW,MAAM,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC,eAAe,CAAC,EAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,EAAC,EAAE,CAAC,CAAC,CAAC;QAE1G,mDAAmD;QACnD,IAAM,MAAM,GAAW,MAAM,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC,eAAe,CAAC,EAAC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,EAAC,EAAE,CAAC,CAAC,CAAC;QAEvG,OAAO;YACL,KAAK,EAAE,QAAQ;YACf,GAAG,EAAE,MAAM;SACZ,CAAC;IACJ,CAAC;IAEa,6BAAa,GAA3B,UAA4B,MAAkB,EAAE,UAAkB,EAAE,QAAgB;QAClF,IAAM,QAAQ,GAAW,MAAM,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;QAC9F,IAAM,MAAM,GAAW,MAAM,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;QAE1F,OAAO;YACL,KAAK,EAAE,QAAQ;YACf,GAAG,EAAE,MAAM;SACZ,CAAC;IACJ,CAAC;IACH,sBAAC;AAAD,CAAC,AAlCD,IAkCC;AAlCY,0CAAe","sourcesContent":["import {Ace} from \"ace-builds\";\nimport {IIndexRange} from \"./IndexRange\";\nimport {IRowRange} from \"./RowRange\";\n\nexport class AceViewportUtil {\n\n  public static getVisibleIndexRange(editor: Ace.Editor): IIndexRange {\n    let firstRow: number = editor.getFirstVisibleRow();\n    let lastRow: number = editor.getLastVisibleRow();\n\n    if (!editor.isRowFullyVisible(firstRow)) {\n      firstRow++;\n    }\n\n    if (!editor.isRowFullyVisible(lastRow)) {\n      lastRow--;\n    }\n\n    const startPos: number = editor.getSession().getDocument().positionToIndex({row: firstRow, column: 0}, 0);\n\n    // todo, this should probably be the end of the row\n    const endPos: number = editor.getSession().getDocument().positionToIndex({row: lastRow, column: 0}, 0);\n\n    return {\n      start: startPos,\n      end: endPos\n    };\n  }\n\n  public static indicesToRows(editor: Ace.Editor, startIndex: number, endIndex: number): IRowRange {\n    const startRow: number = editor.getSession().getDocument().indexToPosition(startIndex, 0).row;\n    const endRow: number = editor.getSession().getDocument().indexToPosition(endIndex, 0).row;\n\n    return {\n      start: startRow,\n      end: endRow\n    };\n  }\n}\n"]}