{"version":3,"file":"AceMultiSelectionManager.js","sourceRoot":"","sources":["../../src/ts/AceMultiSelectionManager.ts"],"names":[],"mappings":";;;AACA,2DAAwD;AAExD;;;;;GAKG;AACH;IAKE;;;;;;OAMG;IACH,kCAAY,OAAwB;QAClC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED;;;;;;;;;;;OAWG;IACI,+CAAY,GAAnB,UAAoB,EAAU,EAAE,KAAa,EAAE,KAAa,EAAE,MAAmB;QAC/E,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,KAAK,SAAS,EAAE;YACtC,MAAM,IAAI,KAAK,CAAC,qCAAqC,GAAG,EAAE,CAAC,CAAC;SAC7D;QAED,IAAM,MAAM,GAAG,IAAI,uCAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAE/E,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;QAC9B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC;IAED;;;;;;;OAOG;IACI,+CAAY,GAAnB,UAAoB,EAAU,EAAE,MAAmB;QACjD,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAEzC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACI,iDAAc,GAArB,UAAsB,EAAU;QAC9B,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAEzC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACI,kDAAe,GAAtB,UAAuB,EAAU;QAC/B,IAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAEvC,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,EAAE,CAAC,CAAC;SAC/C;QAED,iEAAiE;QACjE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAE,SAAiB,CAAC,EAAE,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACI,4CAAS,GAAhB;QAAA,iBAIC;QAHC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;YACvD,KAAI,CAAC,eAAe,CAAC,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,gDAAa,GAArB,UAAsB,EAAU;QAC9B,IAAM,SAAS,GAAuB,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAE3D,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,EAAE,CAAC,CAAC;SAC/C;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IACH,+BAAC;AAAD,CAAC,AAnGD,IAmGC;AAnGY,4DAAwB","sourcesContent":["import {Ace} from \"ace-builds\";\nimport {AceSelectionMarker} from \"./AceSelectionMarker\";\n\n/**\n * Implements multiple colored selections in the ace editor.  Each selection is\n * associated with a particular user. Each user is identified by a unique id\n * and has a color associated with them.  The selection manager supports block\n * selection through multiple AceRanges.\n */\nexport class AceMultiSelectionManager {\n\n  private readonly _selections: { [key: string]: AceSelectionMarker };\n  private readonly _session: Ace.EditSession;\n\n  /**\n   * Constructs a new AceMultiSelectionManager that is bound to a particular\n   * Ace EditSession instance.\n   *\n   * @param session\n   *   The Ace EditSession to bind to.\n   */\n  constructor(session: Ace.EditSession) {\n    this._selections = {};\n    this._session = session;\n  }\n\n  /**\n   * Adds a new collaborative selection.\n   *\n   * @param id\n   *   The unique system identifier for the user associated with this selection.\n   * @param label\n   *   A human readable / meaningful label / title that identifies the user.\n   * @param color\n   *   A valid css color string.\n   * @param ranges\n   *   An array of ace ranges that specify the initial selection.\n   */\n  public addSelection(id: string, label: string, color: string, ranges: Ace.Range[]): void {\n    if (this._selections[id] !== undefined) {\n      throw new Error(\"Selection with id already defined: \" + id);\n    }\n\n    const marker = new AceSelectionMarker(this._session, id, label, color, ranges);\n\n    this._selections[id] = marker;\n    this._session.addDynamicMarker(marker, false);\n  }\n\n  /**\n   * Updates the selection for a particular user.\n   *\n   * @param id\n   *   The unique identifier for the user.\n   * @param ranges\n   *   The array of ranges that specify the selection.\n   */\n  public setSelection(id: string, ranges: Ace.Range[]) {\n    const selection = this._getSelection(id);\n\n    selection.setSelection(ranges);\n  }\n\n  /**\n   * Clears the selection (but does not remove it) for the specified user.\n   * @param id\n   *   The unique identifier for the user.\n   */\n  public clearSelection(id: string): void {\n    const selection = this._getSelection(id);\n\n    selection.setSelection(null);\n  }\n\n  /**\n   * Removes the selection for the specified user.\n   * @param id\n   *   The unique identifier for the user.\n   */\n  public removeSelection(id: string) {\n    const selection = this._selections[id];\n\n    if (selection === undefined) {\n      throw new Error(\"Selection not found: \" + id);\n    }\n\n    // note: ace adds the id property to whatever marker you pass in.\n    this._session.removeMarker((selection as any).id);\n    delete this._selections[id];\n  }\n\n  /**\n   * Removes all selections.\n   */\n  public removeAll(): void {\n    Object.getOwnPropertyNames(this._selections).forEach((key) => {\n      this.removeSelection(this._selections[key].selectionId());\n    });\n  }\n\n  private _getSelection(id: string): AceSelectionMarker {\n    const selection: AceSelectionMarker = this._selections[id];\n\n    if (selection === undefined) {\n      throw new Error(\"Selection not found: \" + id);\n    }\n    return selection;\n  }\n}\n"]}