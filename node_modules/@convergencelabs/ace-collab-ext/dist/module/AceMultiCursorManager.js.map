{"version":3,"file":"AceMultiCursorManager.js","sourceRoot":"","sources":["../../src/ts/AceMultiCursorManager.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,eAAe,EAAC,MAAM,mBAAmB,CAAC;AAElD;;;;;GAKG;AACH,MAAM,OAAO,qBAAqB;IAKhC;;;;;;OAMG;IACH,YAAY,OAAwB;QAClC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED;;;;;;;;;;;OAWG;IACI,SAAS,CAAC,EAAU,EAAE,KAAa,EAAE,KAAa,EAAE,QAA4B;QACrF,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,SAAS,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,mCAAmC,EAAE,EAAE,CAAC,CAAC;SAC1D;QAED,MAAM,MAAM,GAAoB,IAAI,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAE/F,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;;;OAOG;IACI,SAAS,CAAC,EAAU,EAAE,QAA4B;QACvD,MAAM,MAAM,GAAoB,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAEpD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;OAKG;IACI,WAAW,CAAC,EAAU;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAEnC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACI,YAAY,CAAC,EAAU;QAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAEjC,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;SAC5C;QACD,mDAAmD;QACnD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAE,MAAc,CAAC,EAAE,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACI,SAAS;QACd,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACxD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,UAAU,CAAC,EAAU;QAC3B,MAAM,MAAM,GAAoB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAElD,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;SAC5C;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["import {Ace} from \"ace-builds\";\nimport {AceCursorMarker} from \"./AceCursorMarker\";\n\n/**\n * Implements multiple colored cursors in the ace editor.  Each cursor is\n * associated with a particular user. Each user is identified by a unique id\n * and has a color associated with them.  Each cursor has a position in the\n * editor which is specified by a 2-d row and column ({row: 0, column: 10}).\n */\nexport class AceMultiCursorManager {\n\n  private readonly _cursors: { [key: string]: AceCursorMarker };\n  private readonly _session: Ace.EditSession;\n\n  /**\n   * Constructs a new AceMultiCursorManager that is bound to a particular\n   * Ace EditSession instance.\n   *\n   * @param session\n   *   The Ace EditSession to bind to.\n   */\n  constructor(session: Ace.EditSession) {\n    this._cursors = {};\n    this._session = session;\n  }\n\n  /**\n   * Adds a new collaborative selection.\n   *\n   * @param id\n   *   The unique system identifier for the user associated with this selection.\n   * @param label\n   *   A human readable / meaningful label / title that identifies the user.\n   * @param color\n   *   A valid css color string.\n   * @param position\n   *   A 2-d position or linear index indicating the location of the cursor.\n   */\n  public addCursor(id: string, label: string, color: string, position: number | Ace.Point): void {\n    if (this._cursors[id] !== undefined) {\n      throw new Error(`Cursor with id already defined: ${id}`);\n    }\n\n    const marker: AceCursorMarker = new AceCursorMarker(this._session, id, label, color, position);\n\n    this._cursors[id] = marker;\n    this._session.addDynamicMarker(marker, true);\n  }\n\n  /**\n   * Updates the selection for a particular user.\n   *\n   * @param id\n   *   The unique identifier for the user.\n   * @param position\n   *   A 2-d position or linear index indicating the location of the cursor.\n   */\n  public setCursor(id: string, position: number | Ace.Point): void {\n    const cursor: AceCursorMarker = this._getCursor(id);\n\n    cursor.setPosition(position);\n  }\n\n  /**\n   * Clears the cursor (but does not remove it) for the specified user.\n   *\n   * @param id\n   *   The unique identifier for the user.\n   */\n  public clearCursor(id: string): void {\n    const cursor = this._getCursor(id);\n\n    cursor.setPosition(null);\n  }\n\n  /**\n   * Removes the cursor for the specified user.\n   *\n   * @param id\n   *   The unique identifier for the user.\n   */\n  public removeCursor(id: string): void {\n    const cursor = this._cursors[id];\n\n    if (cursor === undefined) {\n      throw new Error(`Cursor not found: ${id}`);\n    }\n    // Note: ace adds an id field to all added markers.\n    this._session.removeMarker((cursor as any).id);\n    delete this._cursors[id];\n  }\n\n  /**\n   * Removes all cursors.\n   */\n  public removeAll(): void {\n    Object.getOwnPropertyNames(this._cursors).forEach((key) => {\n      this.removeCursor(this._cursors[key].cursorId());\n    });\n  }\n\n  private _getCursor(id: string): AceCursorMarker {\n    const cursor: AceCursorMarker = this._cursors[id];\n\n    if (cursor === undefined) {\n      throw new Error(`Cursor not found: ${id}`);\n    }\n    return cursor;\n  }\n}\n"]}